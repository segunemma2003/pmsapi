name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Check Docker Compose
        run: |
          # Check available Docker Compose version
          docker compose version || docker-compose --version || echo "Docker Compose not found"

      - name: Install Python dependencies (pipeline-optimized)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.pipeline.txt
          pip install python-dotenv requests

      - name: Run basic syntax check
        run: |
          # Simple syntax check without Django setup
          python simple_syntax_test.py

      - name: Test Docker build
        run: |
          # Test that Docker can build the image
          docker build -f Dockerfile.pipeline -t test-build .
          echo "‚úÖ Docker build successful"

      - name: Test Docker Compose syntax
        run: |
          # Test Docker Compose files are valid (try both versions)
          if docker compose version &> /dev/null; then
            docker compose -f docker-compose.pipeline.yml config
            docker compose -f docker-compose.production.yml config
            echo "‚úÖ Docker Compose syntax valid (docker compose)"
          elif docker-compose --version &> /dev/null; then
            docker-compose -f docker-compose.pipeline.yml config
            docker-compose -f docker-compose.production.yml config
            echo "‚úÖ Docker Compose syntax valid (docker-compose)"
          else
            echo "‚ùå Docker Compose not available"
            exit 1
          fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 45

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          timeout: 1800s
          script: |
            # Navigate to project directory
            cd /opt/oifyk || exit 1

            # Pull latest code
            git fetch origin
            git reset --hard origin/main

            # Create production environment file
            cat > .env.production << EOF
            DEBUG=False
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ALLOWED_HOSTS=api.oifyk.com

            DB_NAME=oifyk_production
            DB_USER=oifyk_user
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=db
            DB_PORT=5432

            REDIS_URL=redis://redis:6379/0

            EMAIL_HOST=smtp.sendgrid.net
            EMAIL_PORT=587
            EMAIL_HOST_USER=apikey
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
            DEFAULT_FROM_EMAIL=noreply@oifyk.com
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}

            USE_S3=False

            FRONTEND_URL=https://oifyk.com
            CORS_ALLOWED_ORIGINS=https://oifyk.com,https://www.oifyk.com,https://api.oifyk.com

            SECURE_SSL_REDIRECT=True
            SECURE_PROXY_SSL_HEADER=HTTP_X_FORWARDED_PROTO,https

            FEATURE_BEDS24=True
            FEATURE_EMAIL=True
            FEATURE_ANALYTICS=True
            FEATURE_RATE_LIMITING=True

            # AI Features (can be enabled later)
            ENABLE_AI_FEATURES=True
            DISABLE_AI_FEATURES=False
            SPACY_MODEL=en_core_web_sm
            TRANSFORMERS_CACHE=./models
            EOF

            # Note: Dependencies will be installed inside Docker containers
            echo "Dependencies will be installed inside Docker containers during build"

            # Run deployment
            chmod +x scripts/deploy.sh
            ./scripts/deploy.sh

            # Setup SSL certificates (only if not already done)
            if [ ! -f "certbot/conf/live/api.oifyk.com/fullchain.pem" ]; then
              echo "Setting up SSL certificates..."
              ./scripts/setup-ssl.sh
            fi

            # Wait for services to be ready
            echo "‚è≥ Waiting for services to be ready..."
            sleep 30

                                    # Test service health
            echo "üîç Testing service health..."

            # Test simple health check (no database required) - try HTTPS first, then HTTP
            if /usr/bin/curl -f https://api.oifyk.com/api/health/simple/ > /dev/null 2>&1; then
              echo "‚úÖ Simple health check passed (HTTPS)"
            elif /usr/bin/curl -f http://api.oifyk.com/api/health/simple/ > /dev/null 2>&1; then
              echo "‚úÖ Simple health check passed (HTTP)"
            else
              echo "‚ùå Simple health check failed"
              docker compose -f docker-compose.production.yml logs web || docker-compose -f docker-compose.production.yml logs web
              exit 1
            fi

            # Test full health check (with database) - try HTTPS first, then HTTP
            if /usr/bin/curl -f https://api.oifyk.com/api/health/ > /dev/null 2>&1; then
              echo "‚úÖ Full health check passed (HTTPS)"
            elif /usr/bin/curl -f http://api.oifyk.com/api/health/ > /dev/null 2>&1; then
              echo "‚úÖ Full health check passed (HTTP)"
            else
              echo "‚ö†Ô∏è Full health check failed (database might not be ready yet)"
            fi

            # Test nginx proxy - try HTTPS first, then HTTP
            if /usr/bin/curl -f https://api.oifyk.com/api/health/simple/ > /dev/null 2>&1; then
              echo "‚úÖ Nginx proxy health check passed (HTTPS)"
            elif /usr/bin/curl -f http://api.oifyk.com/api/health/simple/ > /dev/null 2>&1; then
              echo "‚úÖ Nginx proxy health check passed (HTTP)"
            else
              echo "‚ùå Nginx proxy health check failed"
              docker compose -f docker-compose.production.yml logs nginx || docker-compose -f docker-compose.production.yml logs nginx
              exit 1
            fi

            echo "üéâ All health checks passed! Deployment successful."

services:
  nginx:
    image: nginx:alpine
    container_name: oifyk_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-initial.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-ssl.conf:/etc/nginx/nginx-ssl.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./logs:/app/logs
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - oifyk_network

  web:
    build: 
      context: .
      dockerfile: Dockerfile.pipeline
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: oifyk_web
    command: gunicorn pms.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 120 --keep-alive 2 --log-level info
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    environment:
      - ENABLE_AI_FEATURES=False
      - DISABLE_AI_FEATURES=True
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - oifyk_network
    healthcheck:
      test: ["CMD", "/usr/bin/curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15-alpine
    container_name: oifyk_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: unless-stopped
    networks:
      - oifyk_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: oifyk_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - oifyk_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery:
    build: 
      context: .
      dockerfile: Dockerfile.pipeline
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: oifyk_celery
    command: celery -A pms worker -l info -Q celery,trust_levels --concurrency=2
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env.production
    environment:
      - ENABLE_AI_FEATURES=False
      - DISABLE_AI_FEATURES=True
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - oifyk_network

  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile.pipeline
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: oifyk_celery_beat
    command: celery -A pms beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env.production
    environment:
      - ENABLE_AI_FEATURES=False
      - DISABLE_AI_FEATURES=True
    depends_on:
      - db
      - redis
      - web
    restart: unless-stopped
    networks:
      - oifyk_network

  certbot:
    image: certbot/certbot
    container_name: oifyk_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    profiles: ["ssl"]

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  oifyk_network:
    driver: bridge 